"""
main.py ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø –¢–ò–£

–ó–∞–ø—É—Å–∫:
    python main.py

–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≥—Ä—É–ø–ø—É
- —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
- —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∞–ª–∏–∞—Å–∞–º–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø)

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- Python 3.8+
- python-telegram-bot
- —Ñ–∞–π–ª groups_full.py —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
- —Ñ–∞–π–ª secrets.py —Å —Ç–æ–∫–µ–Ω–æ–º Telegram-–±–æ—Ç–∞

"""

from typing import Optional, Dict, Tuple
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MenuButton, MenuButtonCommands, Message
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import NetworkError, BadRequest
import re
import datetime
import time
import threading
from urllib.parse import urlparse
import os
from playwright.async_api import async_playwright
import tempfile
from functools import lru_cache
import json
import logging
from aiohttp import web

from .secrets import secret_key
from .groups_full import GROUPS_FULL, get_group_by_name
from .user_data import set_user_group, get_user_group
from .bells import format_bells_message, format_time_left_message

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MIN_MESSAGE_INTERVAL = 1  # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã
SCREENSHOT_TIMEOUT = 5000
PAGE_LOAD_TIMEOUT = 30000
CACHE_TIMEOUT = 300
MAX_RETRIES = 2
RETRY_DELAY = 2
WEBHOOK_HOST = "your-domain.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
WEBHOOK_PORT = 8443  # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"https://{WEBHOOK_HOST}:{WEBHOOK_PORT}/webhook"  # URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_CERT = "path/to/cert.pem"  # –ü—É—Ç—å –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
WELCOME_BASE = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π."
CHOOSE_ACTION = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
CHOOSE_DEPARTMENT = "–í—ã–±–µ—Ä–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:"
CHOOSE_SPECIALTY = "–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:"
CHOOSE_GROUP = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
CHOOSE_MAIN_GROUP = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É:"
SAVED_GROUP = "üìö –í–∞—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {group_name}"
SAVED_MAIN_GROUP = "–ì—Ä—É–ø–ø–∞ {group_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞!"
FORMING_SCHEDULE = "–§–æ—Ä–º–∏—Ä—É—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ..."
ERROR_SITE = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
ERROR_GENERIC = "–û—à–∏–±–∫–∞: {error_message}"
RETRY = "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?"
ONLY_SCHEDULE_URL = "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!"
INVALID_INPUT = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ URL."
SCREENSHOT_ERROR = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ ---
def log_exceptions(func):
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            print(f"Exception in {func.__name__}: {e}")
            if isinstance(e, NetworkError):
                await send_bot_text(args[0], args[1], ERROR_SITE)
            else:
                await send_bot_text(args[0], args[1], ERROR_GENERIC.format(error_message=str(e)))
    return wrapper

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
last_message_ids: Dict[int, int] = {}
user_chat_ids: Dict[int, int] = {}
last_message_time: Dict[int, float] = {}
schedule_cache: Dict[str, Tuple[str, float]] = {}  # url -> (screenshot_path, timestamp)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard(saved_group: Optional[str] = None) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ", callback_data="select_department")],
        [InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", callback_data="show_bells")]
    ]
    if saved_group and saved_group in GROUPS_FULL:
        keyboard.append([
            InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–π –≥—Ä—É–ø–ø—ã", callback_data="show_my_group"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –º–æ—é –≥—Ä—É–ø–ø—É", callback_data="change_my_group")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–æ—é –≥—Ä—É–ø–ø—É", callback_data="change_my_group")
        ])
    return InlineKeyboardMarkup(keyboard)

def get_welcome_message(saved_group: Optional[str] = None, is_after_save: bool = False) -> str:
    if is_after_save:
        return CHOOSE_ACTION
    
    msg = WELCOME_BASE
    if saved_group and saved_group in GROUPS_FULL:
        msg += f"\n\n{SAVED_GROUP.format(group_name=GROUPS_FULL[saved_group]['name'])}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏
    time_info = format_time_left_message()
    msg += f"\n\n{time_info}"
    
    msg += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    return msg

@lru_cache(maxsize=100)
def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º."""
    url_pattern = re.compile(
        r'^https?://'  # http:// –∏–ª–∏ https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'
        r'localhost|'
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
        r'(?::\d+)?'
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return bool(url_pattern.match(url))

@lru_cache(maxsize=100)
def is_allowed_schedule_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    try:
        parsed = urlparse(url)
        return parsed.netloc == "coworking.tyuiu.ru"
    except Exception:
        return False

async def update_welcome_message(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º."""
    if user_id in last_message_ids and user_id in user_chat_ids:
        try:
            saved_group = get_user_group(user_id)
            welcome_message = get_welcome_message(saved_group)
            reply_markup = get_main_keyboard(saved_group)
            
            await context.bot.edit_message_text(
                chat_id=user_chat_ids[user_id],
                message_id=last_message_ids[user_id],
                text=welcome_message,
                reply_markup=reply_markup
            )
        except BadRequest as e:
            print(f"Error updating welcome message: {e}")

@lru_cache(maxsize=1000)
def get_cached_schedule(url: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ."""
    if url in schedule_cache:
        screenshot_path, timestamp = schedule_cache[url]
        if time.time() - timestamp < CACHE_TIMEOUT:
            return screenshot_path
        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
        try:
            os.unlink(screenshot_path)
        except Exception:
            pass
        del schedule_cache[url]
    return None

def cache_schedule(url: str, screenshot_path: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫—ç—à."""
    schedule_cache[url] = (screenshot_path, time.time())

async def get_schedule_screenshot(url: str) -> Optional[str]:
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_path = get_cached_schedule(url)
    if cached_path:
        return cached_path

    for attempt in range(MAX_RETRIES):
        async with async_playwright() as p:
            browser = await p.chromium.launch()
            context = await browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36'
            )
            page = await context.new_page()
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                response = await page.goto(
                    url,
                    wait_until='domcontentloaded',
                    timeout=PAGE_LOAD_TIMEOUT
                )
                
                if not response:
                    if attempt < MAX_RETRIES - 1:
                        await asyncio.sleep(RETRY_DELAY)
                        continue
                    raise Exception("Failed to load page after multiple attempts")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
                try:
                    await page.wait_for_load_state('networkidle', timeout=SCREENSHOT_TIMEOUT)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
                    loading_selectors = ['#loading', '.loading', '[class*="loading"]', '[id*="loading"]']
                    for selector in loading_selectors:
                        try:
                            loading = await page.wait_for_selector(selector, timeout=2000)
                            if loading:
                                await loading.wait_for_element_state('hidden', timeout=5000)
                        except Exception:
                            continue
                    
                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                    try:
                        await page.wait_for_selector('table', timeout=SCREENSHOT_TIMEOUT)
                    except Exception as e:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                        error_text = await page.evaluate('''() => {
                            const errorElements = document.querySelectorAll('*');
                            for (const el of errorElements) {
                                if (el.textContent.includes('–æ—à–∏–±–∫') || 
                                    el.textContent.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ') || 
                                    el.textContent.includes('–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')) {
                                    return el.textContent;
                                }
                            }
                            return null;
                        }''')
                        if error_text:
                            raise Exception(f"Schedule error: {error_text}")
                        raise e
            
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                        await page.screenshot(path=tmp.name, full_page=True)
                        screenshot_path = tmp.name
                        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        cache_schedule(url, screenshot_path)
                    return screenshot_path
                    
                except Exception as e:
                    if attempt < MAX_RETRIES - 1:
                        await asyncio.sleep(RETRY_DELAY)
                        continue
                    raise e
                    
            except Exception as e:
                if attempt < MAX_RETRIES - 1:
                    await asyncio.sleep(RETRY_DELAY)
                    continue
                raise e
            finally:
                await browser.close()
    
            return None

async def send_schedule_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        screenshot_path = await get_schedule_screenshot(url)
        if screenshot_path:
            try:
                with open(screenshot_path, 'rb') as photo:
                    await update.effective_chat.send_photo(
                        photo=photo,
                        disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    )
            finally:
                # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –≤ –∫—ç—à–µ
                if url not in schedule_cache:
                    try:
                        os.unlink(screenshot_path)
                    except Exception:
                        pass
        else:
            await send_bot_text(update, context, SCREENSHOT_ERROR)
    except Exception as e:
        print(f"Error sending screenshot: {e}")
        await send_bot_text(update, context, SCREENSHOT_ERROR)

@log_exceptions
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_menu":
        await start(update, context)
        return
        
    if query.data == "show_bells":
        bells_message = format_bells_message()
        await send_bot_text(update, context, bells_message)
        return
        
    if query.data == "change_my_group":
        context.user_data["is_saving_main"] = True
        departments = ["–ê–∏–≠–°", "–ú–ü–ù", "–ù–ì–û", "–°–û–ù–•", "–ü–û"]
        keyboard = [[InlineKeyboardButton(dep, callback_data=f"department_{i}")] for i, dep in enumerate(departments)]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        await send_bot_text(update, context, CHOOSE_DEPARTMENT, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    if query.data == "select_department":
        departments = ["–ê–∏–≠–°", "–ú–ü–ù", "–ù–ì–û", "–°–û–ù–•", "–ü–û"]
        keyboard = [[InlineKeyboardButton(dep, callback_data=f"department_{i}")] for i, dep in enumerate(departments)]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        await send_bot_text(update, context, CHOOSE_DEPARTMENT, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    if query.data.startswith("department_"):
        dep_idx = int(query.data.replace("department_", ""))
        departments = ["–ê–∏–≠–°", "–ú–ü–ù", "–ù–ì–û", "–°–û–ù–•", "–ü–û"]
        dep_name = departments[dep_idx]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
        specialties = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
        for g in GROUPS_FULL.values():
            if g.get("department") == dep_name:
                specialty = g.get("specialty")
                if specialty:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è
                    specialties.add(specialty)
        
        specialties = sorted(list(specialties))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        
        if specialties:
            keyboard = [[InlineKeyboardButton(spec, callback_data=f"specialty_{spec}")] for spec in specialties]
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="select_department")])
            await send_bot_text(update, context, CHOOSE_SPECIALTY, reply_markup=InlineKeyboardMarkup(keyboard))
            return
        else:
            # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
            await show_groups(update, context, department=dep_name)
            return
    if query.data.startswith("specialty_"):
        specialty = query.data.replace("specialty_", "")
        await show_groups(update, context, department="–°–û–ù–•", specialty=specialty)
        return
    if query.data == "show_my_group":
        user_id = update.effective_user.id
        saved_group = get_user_group(user_id)
        if saved_group and saved_group in GROUPS_FULL:
            group_data = GROUPS_FULL[saved_group]
            url = group_data["url"]
            await send_bot_text(update, context, FORMING_SCHEDULE.format(group_name=group_data['name']))
            await send_schedule_screenshot(update, context, url)
            reply_markup = get_group_action_keyboard(url)
            await send_bot_text(update, context, CHOOSE_ACTION, reply_markup=reply_markup)
        return
    if query.data.startswith("group_"):
        group_id = query.data.replace("group_", "")
        group_data = GROUPS_FULL[group_id]
        url = group_data["url"]
        is_saving_main = context.user_data.get("is_saving_main", False)
        if is_saving_main:
            user_id = update.effective_user.id
            set_user_group(user_id, group_id)
            context.user_data["is_saving_main"] = False
            await send_persistent_text(update, context, SAVED_MAIN_GROUP.format(group_name=group_data['name']))
            await start(update, context, is_after_save=True)
            return
        await send_bot_text(update, context, FORMING_SCHEDULE.format(group_name=group_data['name']))
        await send_schedule_screenshot(update, context, url)
        reply_markup = get_group_action_keyboard(url)
        await send_bot_text(update, context, CHOOSE_ACTION, reply_markup=reply_markup)

@log_exceptions
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    main_name, group_info = get_group_by_name(text)
    if group_info:
        group_id = None
        for gid, gdata in GROUPS_FULL.items():
            if gdata["name"] == main_name:
                group_id = gid
                break
        if group_id:
            url = GROUPS_FULL[group_id]["url"]
            user_id = update.effective_user.id
            set_user_group(user_id, group_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                send_bot_text(update, context, FORMING_SCHEDULE.format(group_name=main_name)),
                send_schedule_screenshot(update, context, url)
            )
            reply_markup = get_group_action_keyboard(url)
            await send_bot_text(update, context, CHOOSE_ACTION, reply_markup=reply_markup)
            return
    if not text.startswith("http"):
        text = "http://" + text
    if not is_valid_url(text):
        await send_bot_text(update, context, INVALID_INPUT)
        return
    if not is_allowed_schedule_url(text):
        await send_bot_text(update, context, ONLY_SCHEDULE_URL)
        return
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=text)],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await send_bot_text(update, context, CHOOSE_ACTION, reply_markup=reply_markup)

@log_exceptions
async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç.
    """
    user_id = update.effective_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id not in last_message_ids or (current_time - last_message_time[user_id]) >= MIN_MESSAGE_INTERVAL:
        saved_group = get_user_group(user_id)
        welcome_message = get_welcome_message(saved_group)
        reply_markup = get_main_keyboard(saved_group)
        await send_bot_text(update, context, welcome_message, reply_markup=reply_markup)
        last_message_time[user_id] = current_time
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É
        if update.message and update.message.text:
            await handle_message(update, context)

@log_exceptions
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App."""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        if data.get("action") == "send_screenshot":
            url = data.get("url")
            if url:
                await send_bot_text(update, context, FORMING_SCHEDULE.format(group_name="–≥—Ä—É–ø–ø—ã"))
                await send_schedule_screenshot(update, context, url)
                reply_markup = get_group_action_keyboard(url)
                await send_bot_text(update, context, CHOOSE_ACTION, reply_markup=reply_markup)
            else:
                await send_bot_text(update, context, "–û—à–∏–±–∫–∞: URL –Ω–µ —É–∫–∞–∑–∞–Ω")
    except Exception as e:
        print(f"Error handling webapp data: {e}")
        await send_bot_text(update, context, ERROR_GENERIC.format(error_message=str(e)))

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def send_bot_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None) -> Optional[Message]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞."""
    user_id = update.effective_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if user_id in last_message_time and current_time - last_message_time[user_id] < MIN_MESSAGE_INTERVAL:
        return None
        
    last_msg_id = context.user_data.get("last_bot_text_id")
    if last_msg_id:
        try:
            await update.effective_chat.delete_message(last_msg_id)
        except Exception:
            pass
            
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if hasattr(update, "message") and update.message:
            msg = await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            )
        else:
            msg = await update.callback_query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
        context.user_data["last_bot_text_id"] = msg.message_id
        last_message_time[user_id] = current_time
        return msg
    except Exception as e:
        print(f"Error sending message: {e}")
        return None

async def send_persistent_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None) -> Optional[Message]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö."""
    try:
        if hasattr(update, "message") and update.message:
            return await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
        else:
            return await update.callback_query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
    except Exception as e:
        print(f"Error sending persistent message: {e}")
        return None

def get_group_id_by_name(main_name: str) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é."""
    for gid, gdata in GROUPS_FULL.items():
        if gdata["name"] == main_name:
            return gid
    return None

# --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@log_exceptions
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE, is_after_save: bool = False):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏.
    """
    await context.bot.set_my_commands([("start", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")])
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if user_id in last_message_ids:
        try:
            await context.bot.delete_message(chat_id=user_chat_ids[user_id], message_id=last_message_ids[user_id])
        except BadRequest:
            pass
    
    saved_group = get_user_group(user_id)
    welcome_message = get_welcome_message(saved_group, is_after_save)
    reply_markup = get_main_keyboard(saved_group)
    message = await send_bot_text(update, context, welcome_message, reply_markup=reply_markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ chat_id
    if message:
        last_message_ids[user_id] = message.message_id
        user_chat_ids[user_id] = chat_id

def get_groups_keyboard(filtered, department=None, specialty=None, is_saving_main=False) -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton(gdata["name"], callback_data=f"group_{gid}")] for gid, gdata in filtered]
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if specialty:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="department_3")])
    elif department:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="select_department")])
    else:
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_group_action_keyboard(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", url=url)],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

def get_retry_keyboard(callback_data: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=callback_data)]])

@log_exceptions
async def show_groups(update: Update, context: ContextTypes.DEFAULT_TYPE, department: Optional[str]=None, specialty: Optional[str]=None, is_saving_main: bool=False):
    query = update.callback_query
    await query.answer()
    if is_saving_main:
        context.user_data["is_saving_main"] = True
    filtered = GROUPS_FULL.items()
    if department:
        filtered = [(gid, gdata) for gid, gdata in filtered if gdata.get("department") == department]
    if specialty:
        filtered = [(gid, gdata) for gid, gdata in filtered if gdata.get("specialty") == specialty]
    title = CHOOSE_GROUP
    if is_saving_main:
        title = CHOOSE_MAIN_GROUP
    elif department and specialty:
        title = f"{CHOOSE_GROUP} {department}, {CHOOSE_SPECIALTY} {specialty}:"
    elif department:
        title = f"{CHOOSE_GROUP} {department}:"
    reply_markup = get_groups_keyboard(filtered, department, specialty, is_saving_main)
    await send_bot_text(update, context, title, reply_markup=reply_markup)

async def update_all_welcome_messages(context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    current_time = time.time()
    for user_id in list(last_message_ids.keys()):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if user_id in last_message_time and current_time - last_message_time[user_id] < MIN_MESSAGE_INTERVAL:
                continue
            await update_welcome_message(context, user_id)
        except Exception as e:
            print(f"Error updating welcome message for user {user_id}: {e}")
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫—ç—à–∞
            if isinstance(e, BadRequest) and "message not found" in str(e).lower():
                if user_id in last_message_ids:
                    del last_message_ids[user_id]
                if user_id in user_chat_ids:
                    del user_chat_ids[user_id]

async def webhook_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram."""
    try:
        update = Update.de_json(await request.json(), request.app['bot'])
        await request.app['dispatcher'].process_update(update)
        return web.Response()
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return web.Response(status=500)

async def setup_webhook(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞."""
    await application.bot.set_webhook(
        url=WEBHOOK_URL,
        certificate=open(WEBHOOK_CERT, 'rb')
    )

async def remove_webhook(application):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞."""
    await application.bot.delete_webhook()

def main():
    """
    –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–µ–±—Ö—É–∫–æ–≤.
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(secret_key).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue = app.job_queue
    job_queue.run_repeating(update_all_welcome_messages, interval=60)
    
    # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    web_app = web.Application()
    web_app['bot'] = app.bot
    web_app['dispatcher'] = app
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    web_app.router.add_post('/webhook', webhook_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    app.post_init = setup_webhook
    app.post_shutdown = remove_webhook
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    logger.info("Bot started with webhook...")
    web.run_app(
        web_app,
        host='0.0.0.0',
        port=WEBHOOK_PORT,
        ssl_context={
            'cert': WEBHOOK_CERT,
            'key': WEBHOOK_CERT.replace('.pem', '.key')
        }
    )

if __name__ == '__main__':
    main()