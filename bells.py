"""
bells.py ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø–∞—Ä –∏ –ø–µ—Ä–µ–º–µ–Ω
"""

# –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
FIRST_PAIR_START = "8:00"

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
PAIR_DURATION = 95

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
FIVE_MIN_BREAK = 5

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
REGULAR_BREAK = 10

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ–º–µ–Ω—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
LONG_BREAK = 40

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
TOTAL_PAIRS = 7

def get_bells_schedule():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    [
        {
            "pair": 1,
            "start": "8:00",
            "end": "9:35",
            "break": "9:35-9:45",
            "five_min": "8:45-8:50"
        },
        ...
    ]
    """
    from datetime import datetime, timedelta
    
    schedule = []
    current_time = datetime.strptime(FIRST_PAIR_START, "%H:%M")
    
    for pair in range(1, TOTAL_PAIRS + 1):
        # –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã
        pair_start = current_time.strftime("%H:%M")
        
        # –í—Ä–µ–º—è –ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏ (—á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã)
        five_min_start = (current_time + timedelta(minutes=45)).strftime("%H:%M")
        five_min_end = (current_time + timedelta(minutes=50)).strftime("%H:%M")
        
        # –ö–æ–Ω–µ—Ü –ø–∞—Ä—ã (–Ω–∞—á–∞–ª–æ + 95 –º–∏–Ω—É—Ç)
        current_time += timedelta(minutes=PAIR_DURATION)
        pair_end = current_time.strftime("%H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω—ã
        if pair == 3:  # –ü–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–π –ø–∞—Ä—ã –±–æ–ª—å—à–∞—è –ø–µ—Ä–µ–º–µ–Ω–∞
            break_duration = LONG_BREAK
        elif pair == 7:  # –ü–æ—Å–ª–µ —Å–µ–¥—å–º–æ–π –ø–∞—Ä—ã –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω—ã
            break_duration = 0
        else:
            break_duration = REGULAR_BREAK
        
        # –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–º–µ–Ω—ã
        break_start = current_time.strftime("%H:%M")
        
        # –ö–æ–Ω–µ—Ü –ø–µ—Ä–µ–º–µ–Ω—ã
        current_time += timedelta(minutes=break_duration)
        break_end = current_time.strftime("%H:%M")
        
        schedule.append({
            "pair": pair,
            "start": pair_start,
            "end": pair_end,
            "break": f"{break_start}-{break_end}" if break_duration > 0 else "–Ω–µ—Ç",
            "five_min": f"{five_min_start}-{five_min_end}"
        })
    
    return schedule

def format_bells_message():
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.
    """
    schedule = get_bells_schedule()
    message = "üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n\n"
    
    for pair in schedule:
        message += f"–ü–∞—Ä–∞ {pair['pair']}:\n"
        message += f"‚è∞ {pair['start']} - {pair['end']}\n"
        message += f"‚è± –ü—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞: {pair['five_min']}\n"
        if pair['break'] != "–Ω–µ—Ç":
            message += f"‚òï –ü–µ—Ä–µ–º–µ–Ω–∞: {pair['break']}\n"
        message += "\n"
    
    return message

def get_current_pair_info():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ –∏ –æ—Å—Ç–∞–≤—à–µ–º—Å—è –≤—Ä–µ–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
    {
        "current_pair": –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã (1-7) –∏–ª–∏ 0 –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ–Ω–∞,
        "is_break": True –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ–Ω–∞,
        "time_left": –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö,
        "next_event": "–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞" –∏–ª–∏ "–∫–æ–Ω–µ—Ü –ø–∞—Ä—ã" –∏–ª–∏ "–Ω–∞—á–∞–ª–æ –ø–∞—Ä—ã"
    }
    """
    from datetime import datetime, timedelta
    
    now = datetime.now()
    current_time = now.time()
    schedule = get_bells_schedule()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ datetime –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    current_datetime = datetime.combine(datetime.today(), current_time)
    
    for i, pair in enumerate(schedule, 1):
        start_time = datetime.strptime(pair["start"], "%H:%M").time()
        end_time = datetime.strptime(pair["end"], "%H:%M").time()
        
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –ø–∞—Ä—ã
        if start_time <= current_time < end_time:
            time_to_end = datetime.combine(datetime.today(), end_time) - current_datetime
            minutes_left = int(time_to_end.total_seconds() / 60)
            
            # –ï—Å–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
            if minutes_left > 5:
                return {
                    "current_pair": i,
                    "is_break": False,
                    "time_left": minutes_left - 5,
                    "next_event": "–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞"
                }
            # –ï—Å–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã 5 –º–∏–Ω—É—Ç –∏–ª–∏ –º–µ–Ω—å—à–µ
            else:
                return {
                    "current_pair": i,
                    "is_break": False,
                    "time_left": minutes_left,
                    "next_event": "–∫–æ–Ω–µ—Ü –ø–∞—Ä—ã"
                }
        
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ–Ω–∞ (–∏ –æ–Ω–∞ –µ—Å—Ç—å)
        if pair["break"] != "–Ω–µ—Ç":
            break_start = datetime.strptime(pair["break"].split("-")[0], "%H:%M").time()
            break_end = datetime.strptime(pair["break"].split("-")[1], "%H:%M").time()
            
            if break_start <= current_time < break_end:
                time_to_end = datetime.combine(datetime.today(), break_end) - current_datetime
                minutes_left = int(time_to_end.total_seconds() / 60)
                return {
                    "current_pair": 0,
                    "is_break": True,
                    "time_left": minutes_left,
                    "next_event": "–Ω–∞—á–∞–ª–æ –ø–∞—Ä—ã"
                }
    
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ —É—á–µ–±–Ω–æ–µ –≤—Ä–µ–º—è
    return {
        "current_pair": 0,
        "is_break": True,
        "time_left": 0,
        "next_event": "–Ω–∞—á–∞–ª–æ –ø–∞—Ä—ã"
    }

def format_time_left_message():
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Å—Ç–∞–≤—à–µ–º—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è.
    """
    info = get_current_pair_info()
    
    if info["current_pair"] == 0:
        if info["time_left"] == 0:
            return "–°–µ–π—á–∞—Å –Ω–µ —É—á–µ–±–Ω–æ–µ –≤—Ä–µ–º—è"
        return f"–°–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ–Ω–∞\n–î–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å {info['time_left']} –º–∏–Ω—É—Ç"
    
    if info["is_break"]:
        return f"–°–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ–Ω–∞\n–î–æ –Ω–∞—á–∞–ª–∞ {info['current_pair']} –ø–∞—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å {info['time_left']} –º–∏–Ω—É—Ç"
    
    # –ï—Å–ª–∏ –∏–¥–µ—Ç –ø–∞—Ä–∞
    message = f"–°–µ–π—á–∞—Å –∏–¥–µ—Ç {info['current_pair']} –ø–∞—Ä–∞\n"
    
    if info["next_event"] == "–ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∞":
        message += f"‚è∞ –î–æ –ø—è—Ç–∏–º–∏–Ω—É—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {info['time_left']} –º–∏–Ω—É—Ç"
    else:
        message += f"‚è∞ –î–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å {info['time_left']} –º–∏–Ω—É—Ç"
    
    return message
